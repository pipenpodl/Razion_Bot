from aiogram import types
from aiogram.dispatcher import FSMContext
import asyncio

from razi.states.states import ListFood

import aio_pika


API_QUEUE_NAME = "api_queue"
BOT_QUEUE_NAME = "bot_queue"


loop = asyncio.get_event_loop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∫–∞–Ω–∞–ª–∞ RabbitMQ
async def init_rabbitmq():
    connection = await aio_pika.connect_robust("amqp://guest:guest@localhost/")
    channel = await connection.channel()
    return connection, channel

connection, channel = loop.run_until_complete(init_rabbitmq())


async def send_message_to_queue(text):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å api_queue
    await channel.default_exchange.publish(
        aio_pika.Message(body=text.encode()),
        routing_key=API_QUEUE_NAME,
    )


async def wait_for_response():
    while True:
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ bot_queue –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ
        queue = await channel.declare_queue(BOT_QUEUE_NAME, auto_delete=False)

        async with queue.iterator() as queue_iter:
            async for message in queue_iter:
                async with message.process():
                    return message.body.decode()

        await asyncio.sleep(1)            


async def start_bot(message: types.Message):
    await message.answer('''
        üë®üèº‚Äçüç≥–î–æ—Ä–æ–≥–∏–µ –≥—É—Ä–º–∞–Ω—ã! –Ø –≤–∞—à —à–µ—Ñ-–ø–æ–≤–∞—Ä, –≥–æ—Ç–æ–≤—ã–π –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º–∏ –±–ª—é–¥–∞–º–∏. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—É–ª–∏–Ω–∞—Ä–Ω—ã—Ö –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–π!

üëâüèº–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–∫–∞–∂–∏—Ç–µ –º–Ω–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ, –∏ —è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª—é –¥–ª—è –≤–∞—Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /recipe, –∏ –º—ã –Ω–∞—á–Ω–µ–º —Ç–≤–æ—Ä–∏—Ç—å –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –Ω–∞ –≤–∞—à–µ–π –∫—É—Ö–Ω–µ!
    ''')


async def name_food(message: types.Message):
    await message.answer("–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å. –í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏).")

    # Set state
    await ListFood.list_food.set()


async def validate_input(user_input):
    # –†–∞–∑–±–∏–≤–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –ø–æ –∑–∞–ø—è—Ç—ã–º
    words = user_input.split(',')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
    for word in words:  
        
        if word.isdigit():
            return False
        
    
    return True


async def get_food(message: types.Message, state: FSMContext):
    await state.update_data(l_food=message.text)

    data = await state.get_data()

    if await validate_input(data["l_food"]):
        await send_message_to_queue(data["l_food"])
        await message.answer("–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã")
        await message.answer(await wait_for_response())
                    
        # –í—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
        await state.finish()

    else:
        await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /recipe (–≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –∑—è–ø—è—Ç—É—é)")
        await state.finish()

